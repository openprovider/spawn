{"name":"Spawn","tagline":"The Spawn service used as a HTTP REST sync service, that makes clustering mode simpler and easier for most of applications.","body":"Spawn Sync service\r\n==================\r\n\r\nThe Spawn service used as a HTTP REST sync service, that makes clustering mode simpler and easier for most\r\nof applications. What's the idea? There are several applications, which are developed to provide their service\r\nthrough HTTP Rest API. But you have no idea how to provide failover processing and clustering mode for these \r\napplications, because they are not compatible with, etc. And here we go. The Spawn service will make this\r\njob instead of the whole bunch of services that must be configured and communicating with each other.\r\nHow it works? Let's see the scheme:\r\n\r\n![Scheme](https://github.com/takama/spawn/blob/master/scheme/scheme.png)\r\n\r\nAll GET requests from the Client will reproduce with a selected node. A node for GET requests will be selected\r\nby specified 'round-robin' and 'by priority' mode if they are active. All updates requests (PUT, POST, DELETE)\r\nwill be repeated to every node or will be accumulated in the corresponded queue if the node is unreachable.\r\n\r\nIf temporarily switch off the node 3 from the process, due to maintenance or network loss, the updates worker\r\nof the node 3 will be stopped automatically and all updates of the node 3 would begin to accumulate in the queue.\r\nAfter the end of maintenance work all accumulated updates will posted in the node 3. \r\n\r\nEmbedded health checker makes possible to recover processing automatically. \r\n\r\nThe service has API to control of the nodes. So, if you setup the Spawn API on localhost:7118, you can use query\r\nbelow to show what nodes are configured:\r\n\r\n```sh\r\ncurl -XGET http://localhost:7118/nodes?pretty=true\r\n\r\n{\r\n  \"duration\": 25982,\r\n  \"took\": \"25.982Âµs\",\r\n  \"data\": {\r\n    \"results\": [\r\n      {\r\n        \"host\": \"node1.myapp.com\",\r\n        \"port\": 7017,\r\n        \"priority\": 1,\r\n        \"active\": true,\r\n        \"maintenance\": false\r\n      },\r\n      {\r\n        \"host\": \"node2.myapp.com\",\r\n        \"port\": 7017,\r\n        \"priority\": 2,\r\n        \"active\": true,\r\n        \"maintenance\": false\r\n      }\r\n    ],\r\n    \"success\": true,\r\n    \"total\": 2\r\n  }\r\n}\r\n\r\n```\r\n\r\nOf course you could modify/delete these setting with PUT/DELETE request. Use API helper '/list' to see all supported methods.\r\n\r\nCurrently this is not production version, follow the updates.\r\n\r\n### Restrictions\r\n\r\n- HTTPS is not supported currently\r\n\r\n\r\n### Config\r\n\r\nExample of a config file\r\n```json\r\n{\r\n  \"host\": \"spawn.myapp.com\",\r\n  \"port\": 7117,\r\n  \"api\": {\r\n    \"host\": \"spawn.myapp.com\",\r\n    \"port\": 7118\r\n  },\r\n  \"query-mode\": {\r\n    \"round-robin\": true,\r\n    \"by-priority\": true\r\n  },\r\n  \"health-check\": {\r\n    \"seconds\": 10,\r\n    \"url\": \"/info\",\r\n    \"regexp\": \"^version:[0-9]+$\"\r\n  },\r\n  \"nodes\": [\r\n    {\r\n      \"host\": \"node1.myapp.com\",\r\n      \"port\": 7017,\r\n      \"priority\": 1,\r\n      \"active\": true,\r\n      \"maintenance\": false\r\n    },\r\n    {\r\n      \"host\": \"node2.myapp.com\",\r\n      \"port\": 7017,\r\n      \"priority\": 2,\r\n      \"active\": true,\r\n      \"maintenance\": false\r\n    },\r\n    {\r\n      \"host\": \"node3.myapp.com\",\r\n      \"port\": 7017,\r\n      \"priority\": 3,\r\n      \"active\": false,\r\n      \"maintenance\": false\r\n    }\r\n  ]\r\n}\r\n```\r\n### Install from source\r\n\r\nYou need have installed golang 1.4.2+\r\n\r\nThis service is \"go-gettable\", just do:\r\n\r\n```sh\r\ngo get github.com/takama/spawn/spawnctl\r\n```\r\n\r\n### Usage\r\n\r\n```sh\r\nspawnctl - Spawn Sync Service Control\r\n\r\nUsage:\r\n  spawnctl install | remove | start | stop | status\r\n  spawnctl [ -t | --test ] [ --option | --option ... ]\r\n  spawnctl -h | --help\r\n  spawnctl -v | --version\r\n\r\nCommands:\r\n  install           Install as service\r\n  remove            Remove service\r\n  start             Start service\r\n  stop              Stop service\r\n  status            Check service status\r\n\r\n  -h --help         Show this screen\r\n  -v --version      Show version\r\n  -t --test         Test mode\r\n\r\nOptions:\r\n  --config=PATH          Path to the config file\r\n  --host=HOST            Host name or IP address\r\n  --port=PORT            Port number\r\n  --api-host=HOST        API host name or IP address\r\n  --api-port=PORT        API port number\r\n  --round-robin          Use round-robin mode for querying of nodes\r\n  --by-priority          Nodes will queried according to priority\r\n  --check-sec=SECONDS    Check nodes every number of seconds\r\n  --check-url=URL        URL to check nodes (/info, etc)\r\n  --check-regexp=REGEXP  Regexp pattern to check nodes\r\n```\r\n\r\n## Todo\r\n\r\n- More of Tests coverage and benchmarks\r\n- Synchronization between the nodes\r\n- Exponential Back-off\r\n- support of HTTPS\r\n- Monitoring system inside\r\n- Admin panel for monitoring and configuration of the nodes\r\n- Extended logging system\r\n\r\n## Author\r\n\r\n[Igor Dolzhikov](https://github.com/takama)\r\n\r\n## Contributors\r\n\r\nAll the contributors are welcome. If you would like to be the contributor please accept some rules.\r\n- The pull requests will be accepted only in \"develop\" branch\r\n- All modifications or additions should be tested\r\n- Sorry, I'll not accept code with any dependency, only standard library\r\n\r\nThank you for your understanding!\r\n\r\n## License\r\n\r\n[MIT License](https://github.com/takama/spawn/blob/master/LICENSE)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}